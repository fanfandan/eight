<div> <div class="a1"> <h1>Vue</h1> <table> <thead> <tr> <th>名称</th> <th>变量</th> <th>用法</th> </tr> </thead> <tbody> <tr> <td>fiex</td> <td>var</td> <td>添加使用</td> </tr> </tbody> </table></div> <div class="a2"> <h2>name</h2>Very often we will need to map routes with the given pattern to the same component. For example we may have a User component which should be rendered for all users but with different user IDs. In vue-router we can use a dynamic segment in the path to achieve that:Now URLs like /user/foo and /user/bar will both map to the same route.<pre><code class="lang-">Creating a Single-page Application with Vue + Vue Routeisdead simple. With Vue.js, we are already composing our application with components. When adding vue-router to the mix, all we need to do is map our components to the routes and let vue-router know where to render them. Here’s a basic example: </code></pre> </div> <div class="a3"><h2>Getter</h2> <pre><code class="lang-">fgvsalcgshjkcdsjfjd vhjklsdghjskld sdfnskdvdlkv sdvsdv </code></pre> </div><div class="a4"> <h2>Sas</h2>
Throughout the docs, we will often use the router instance. Keep in mind that this.router is exactly the same as using router. The reason we use this.routerisexactlythesameasusingrouter.Thereasonweusethis.router is because we don’t want to import the router in every single component that needs to manipulate routing.
 <pre><code class="lang-">sjdnfsdksjdfksjdfjdfsdfj smksdmls dsklsdmvkcsmd sdmssdvsdvd </code></pre> </div> <div class="a5"> <h2>Route</h2>
Creating a Single-page Application with Vue + Vue Router is dead simple. With Vue.js, we are already composing our application with components. When adding vue-router to the mix, all we need to do is map our components to the routes and let vue-router know where to render them. Here’s a basic example:<pre><code class="lang-">fgvsalcgshjkcdsjfjd vhjklsdghjskld sdfnskdvdlkv sdvsdv </code></pre> </div> </div>